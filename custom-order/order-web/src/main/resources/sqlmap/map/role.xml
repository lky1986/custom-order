<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd"> 
<mapper namespace="com.order.datasource.dao.RoleDAO">
	
	<sql id="columns">
		id,<include refid="columnsWidthOutId"/>
	</sql>
	
	<sql id="columnsWidthOutId">
		role_code,
		role_name,
		partter,
		description,
		create_user,
		create_time,
		update_user,
		update_time
	</sql>
	
	<resultMap type="com.order.datasource.domain.Role" id="resultRole">
		<result column="id" property="id"/>
		<result column="role_code" property="roleCode"/>
		<result column="role_name" property="roleName"/>
		<result column="partter" property="partter"/>
		<result column="description" property="description"/>
		<result column="create_user" property="createUser"/>
		<result column="create_time" property="createTime"/>
		<result column="update_user" property="updateUser"/>
		<result column="update_time" property="updateTime"/>
	</resultMap>
			
	<insert id="save">
		insert into role 
			(<include refid="columnsWidthOutId"/>)
		value 
		(
			#{roleCode},	
			#{roleName},
			#{partter},
			#{description},
			#{createUser},
			now(),
			#{updateUser},
			now()
		) 	
	</insert>
	
	<update id="update">
		update 
			role 
		set 
			role_name = #{roleName},
			partter = #{partter},
			description = #{description},
			update_user = #{updateUser},
			update_time = now()
		where
			id = #{id} 
	</update>
	
	<delete id="delete">
		delete from 
			role 
		where 
			id = #{0}
	</delete>
	
	<delete id="deletes">
		delete from 
			role 
		where 
			id in 
			<foreach collection="ids" item="item" open="(" separator="," close=")">  
       			 #{item}   
    		</foreach>
	</delete>
	
	<select id="find" resultMap="resultRole">
		select
			<include refid="columns"/>
		from 
			role 
		where 
			id = #{0}
	</select>
	
	<select id="findAll" resultMap="resultRole">
		select
			<include refid="columns"/>
		from 
			role 
	</select>
	
	<select id="findCount" resultType="long">
		select
			count(*)
		from
			role
	</select>
	
	<select id="findLimit" resultMap="resultRole">
		select
			<include refid="columns"/>
		from
			role
		limit #{0},#{1}
	</select>
	
	<select id="findCountByCondition" resultType="long">
		select
			count(*)
		from
			role
			<include refid="Common.parseFilterRules"/>
	</select>
	
	<select id="findLimitByCondition" resultMap="resultRole">
		select
			<include refid="columns"/>
		from
			role
			<include refid="Common.parseFilterRules"/>
			limit #{1},#{2}
	</select>
	
	<select id="findByRoleCode" resultMap="resultRole">
		select
			<include refid="columns"/>
		from 
			role 
		where 
			role_code = #{0}
	</select>
</mapper>